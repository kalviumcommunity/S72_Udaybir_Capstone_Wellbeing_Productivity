var e=Object.defineProperty,t=(t,s,i)=>((t,s,i)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[s]=i)(t,"symbol"!=typeof s?s+"":s,i);const s=new class{constructor(e){t(this,"requests",new Map),t(this,"config"),this.config=e}canMakeRequest(e){const t=Date.now(),s=t-this.config.windowMs;if(!this.requests.has(e))return this.requests.set(e,[t]),!0;const i=this.requests.get(e).filter(e=>e>s);return!(i.length>=this.config.maxRequests)&&(i.push(t),this.requests.set(e,i),!0)}getRemainingRequests(e){const t=Date.now()-this.config.windowMs;if(!this.requests.has(e))return this.config.maxRequests;const s=this.requests.get(e).filter(e=>e>t);return Math.max(0,this.config.maxRequests-s.length)}getResetTime(e){if(!this.requests.has(e))return Date.now();const t=this.requests.get(e);if(0===t.length)return Date.now();return Math.min(...t)+this.config.windowMs}clear(e){e?this.requests.delete(e):this.requests.clear()}}({maxRequests:10,windowMs:6e4}),i=e=>s.canMakeRequest(e);export{s as apiRateLimiter,i as canMakeApiRequest};
